
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000152  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z13displayNumberh>:
#include <avr/io.h>
#include <util/delay.h>

#define F_CPU 8000000UL  // Assuming an 8MHz clock frequency, adjust as needed

void displayNumber(uint8_t num) {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	// Assuming common cathode seven-segment display
	uint8_t seg[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  96:	9a e0       	ldi	r25, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	9a 95       	dec	r25
  a6:	e1 f7       	brne	.-8      	; 0xa0 <_Z13displayNumberh+0x1e>
	PORTC = seg[num];
  a8:	e1 e0       	ldi	r30, 0x01	; 1
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ec 0f       	add	r30, r28
  ae:	fd 1f       	adc	r31, r29
  b0:	e8 0f       	add	r30, r24
  b2:	f1 1d       	adc	r31, r1
  b4:	80 81       	ld	r24, Z
  b6:	85 bb       	out	0x15, r24	; 21
}
  b8:	2a 96       	adiw	r28, 0x0a	; 10
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <_Z18displayAllSegmentsv>:

void displayAllSegments() {
	PORTC = 0xFF;  // Display all segments (0xFF)
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f e3       	ldi	r18, 0x3F	; 63
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <_Z18displayAllSegmentsv+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_Z18displayAllSegmentsv+0x14>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <_Z23turnOffSegmentsOneByOnev>:
	_delay_ms(1000);
}

void turnOffSegmentsOneByOne() {
	for (int i = 0; i < 8; i++) {
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
		PORTC &= ~(1 << i);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	35 b3       	in	r19, 0x15	; 21
  ec:	ab 01       	movw	r20, r22
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <_Z23turnOffSegmentsOneByOnev+0x14>
  f2:	44 0f       	add	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <_Z23turnOffSegmentsOneByOnev+0x10>
  fa:	24 2f       	mov	r18, r20
  fc:	20 95       	com	r18
  fe:	23 23       	and	r18, r19
 100:	25 bb       	out	0x15, r18	; 21
 102:	2f e3       	ldi	r18, 0x3F	; 63
 104:	3d e0       	ldi	r19, 0x0D	; 13
 106:	43 e0       	ldi	r20, 0x03	; 3
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <_Z23turnOffSegmentsOneByOnev+0x26>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z23turnOffSegmentsOneByOnev+0x30>
 112:	00 00       	nop
	PORTC = 0xFF;  // Display all segments (0xFF)
	_delay_ms(1000);
}

void turnOffSegmentsOneByOne() {
	for (int i = 0; i < 8; i++) {
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	91 05       	cpc	r25, r1
 11a:	39 f7       	brne	.-50     	; 0xea <_Z23turnOffSegmentsOneByOnev+0x8>
		PORTC &= ~(1 << i);
		_delay_ms(1000);
	}
}
 11c:	08 95       	ret

0000011e <main>:

int main() {
	DDRA &= ~(1 << PA0);  // Set PA0 as input
 11e:	d0 98       	cbi	0x1a, 0	; 26
	DDRC = 0xFF;          // Set PORTC as output
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 bb       	out	0x14, r24	; 20

	uint8_t a = 0;

	// Display zero initially
	displayNumber(a);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 41 00 	call	0x82	; 0x82 <_Z13displayNumberh>

int main() {
	DDRA &= ~(1 << PA0);  // Set PA0 as input
	DDRC = 0xFF;          // Set PORTC as output

	uint8_t a = 0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0

	// Display zero initially
	displayNumber(a);

	while (1) {
		if (!(PINA & (1 << PA0))) { // Check if the button is pressed (low level)
 12c:	c8 99       	sbic	0x19, 0	; 25
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0xe>
			// Increment the number and wrap around if needed
			a = a + 1;
 130:	cf 5f       	subi	r28, 0xFF	; 255
			if (a > 9) {
 132:	ca 30       	cpi	r28, 0x0A	; 10
 134:	28 f0       	brcs	.+10     	; 0x140 <main+0x22>
				a = 0;
				displayAllSegments();  // Display all segments when the number is 9
 136:	0e 94 65 00 	call	0xca	; 0xca <_Z18displayAllSegmentsv>
				turnOffSegmentsOneByOne();  // Turn off segments one by one after one second
 13a:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z23turnOffSegmentsOneByOnev>
	while (1) {
		if (!(PINA & (1 << PA0))) { // Check if the button is pressed (low level)
			// Increment the number and wrap around if needed
			a = a + 1;
			if (a > 9) {
				a = 0;
 13e:	c0 e0       	ldi	r28, 0x00	; 0
				displayAllSegments();  // Display all segments when the number is 9
				turnOffSegmentsOneByOne();  // Turn off segments one by one after one second
			}

			// Display the updated number
			displayNumber(a);
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 41 00 	call	0x82	; 0x82 <_Z13displayNumberh>
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x2c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x32>
 150:	00 00       	nop

			// Wait for a short time to avoid multiple increments
			_delay_ms(200);

			// Wait until the button is released to avoid multiple increments
			while (!(PINA & (1 << PA0))) {
 152:	c8 99       	sbic	0x19, 0	; 25
 154:	eb cf       	rjmp	.-42     	; 0x12c <main+0xe>
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x3c>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x42>
 160:	00 00       	nop
 162:	c8 9b       	sbis	0x19, 0	; 25
 164:	f8 cf       	rjmp	.-16     	; 0x156 <main+0x38>
 166:	e2 cf       	rjmp	.-60     	; 0x12c <main+0xe>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
